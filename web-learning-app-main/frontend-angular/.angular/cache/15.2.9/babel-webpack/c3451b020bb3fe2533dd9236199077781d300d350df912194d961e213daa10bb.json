{"ast":null,"code":"import { UserStory } from '../models/user-story.model';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserStoryService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/user-stories';\n    this.userStory = new UserStory();\n    this.editMode = false;\n    this.userStories = [];\n  }\n  getUserStories() {\n    return this.http.get(this.apiUrl);\n  }\n  getUserStoryById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  addUserStory(userStory) {\n    return this.http.post(this.apiUrl, userStory).pipe(tap(newStory => {\n      console.log('New story added:', newStory);\n      userStory.id = newStory.id; // Update the userStory object's ID with the received ID\n      // Add the new user story to the array\n      this.userStories.push(newStory);\n      // Clear the form\n      this.userStory = new UserStory();\n    }), catchError(error => {\n      console.error('Error adding story:', error);\n      throw error;\n    }));\n  }\n  updateUserStoryByName(name, updatedStory) {\n    const storyIndex = this.userStories.findIndex(story => story.title === name);\n    if (storyIndex !== -1) {\n      return this.http.put(`${this.apiUrl}/${this.userStories[storyIndex].id}`, updatedStory);\n    } else {\n      throw new Error('Story not found');\n    }\n  }\n  deleteUserStoryByName(name) {\n    const storyIndex = this.userStories.findIndex(story => story.title === name);\n    if (storyIndex !== -1) {\n      return this.http.delete(`${this.apiUrl}/${this.userStories[storyIndex].id}`);\n    } else {\n      throw new Error('Story not found');\n    }\n    // ... other methods ...\n  }\n}\n\nUserStoryService.ɵfac = function UserStoryService_Factory(t) {\n  return new (t || UserStoryService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserStoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserStoryService,\n  factory: UserStoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,SAAS,QAAQ,4BAA4B;AACtD,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,gBAAgB;EAM3BC,YACUC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANN,WAAM,GAAG,oCAAoC;IACrD,cAAS,GAAc,IAAIL,SAAS,EAAE;IACtC,aAAQ,GAAY,KAAK;IACzB,gBAAW,GAAgB,EAAE;EAKxB;EAELM,cAAc;IACZ,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,CAAC;EAChD;EAEAC,gBAAgB,CAACC,EAAU;IACzB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAY,GAAG,IAAI,CAACC,MAAM,IAAIE,EAAE,EAAE,CAAC;EACzD;EAEAC,YAAY,CAACC,SAAoB;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAY,IAAI,CAACL,MAAM,EAAEI,SAAS,CAAC,CAACE,IAAI,CAC3Db,GAAG,CAAEc,QAAQ,IAAI;MACfC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,QAAQ,CAAC;MACzCH,SAAS,CAACF,EAAE,GAAGK,QAAQ,CAACL,EAAE,CAAC,CAAC;MAE5B;MACA,IAAI,CAACQ,WAAW,CAACC,IAAI,CAACJ,QAAQ,CAAC;MAE/B;MACA,IAAI,CAACH,SAAS,GAAG,IAAIZ,SAAS,EAAE;IAClC,CAAC,CAAC,EACFE,UAAU,CAAEkB,KAAK,IAAI;MACnBJ,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAIAC,qBAAqB,CAACC,IAAY,EAAEC,YAAuB;IACzD,MAAMC,UAAU,GAAG,IAAI,CAACN,WAAW,CAACO,SAAS,CAAEC,KAAK,IAAKA,KAAK,CAACC,KAAK,KAAKL,IAAI,CAAC;IAE9E,IAAIE,UAAU,KAAK,CAAC,CAAC,EAAE;MACrB,OAAO,IAAI,CAACnB,IAAI,CAACuB,GAAG,CAAY,GAAG,IAAI,CAACpB,MAAM,IAAI,IAAI,CAACU,WAAW,CAACM,UAAU,CAAC,CAACd,EAAE,EAAE,EAAEa,YAAY,CAAC;KACnG,MAAM;MACL,MAAM,IAAIM,KAAK,CAAC,iBAAiB,CAAC;;EAEtC;EAEAC,qBAAqB,CAACR,IAAY;IAChC,MAAME,UAAU,GAAG,IAAI,CAACN,WAAW,CAACO,SAAS,CAAEC,KAAK,IAAKA,KAAK,CAACC,KAAK,KAAKL,IAAI,CAAC;IAE9E,IAAIE,UAAU,KAAK,CAAC,CAAC,EAAE;MACrB,OAAO,IAAI,CAACnB,IAAI,CAAC0B,MAAM,CAAC,GAAG,IAAI,CAACvB,MAAM,IAAI,IAAI,CAACU,WAAW,CAACM,UAAU,CAAC,CAACd,EAAE,EAAE,CAAC;KAC7E,MAAM;MACL,MAAM,IAAImB,KAAK,CAAC,iBAAiB,CAAC;;IAGtC;EACA;;;AA5DW1B,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA6B,SAAhB7B,gBAAgB;EAAA8B,YAFf;AAAM","names":["UserStory","tap","catchError","UserStoryService","constructor","http","getUserStories","get","apiUrl","getUserStoryById","id","addUserStory","userStory","post","pipe","newStory","console","log","userStories","push","error","updateUserStoryByName","name","updatedStory","storyIndex","findIndex","story","title","put","Error","deleteUserStoryByName","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Downloads\\web-learning-app-main\\web-learning-app-main\\frontend-angular\\src\\app\\services\\user-story.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { UserStory } from '../models/user-story.model';\r\nimport { tap, catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserStoryService {\r\n  private apiUrl = 'http://localhost:3000/user-stories';\r\n  userStory: UserStory = new UserStory();\r\n  editMode: boolean = false;\r\n  userStories: UserStory[] = []; \r\n\r\n  constructor(\r\n    private http: HttpClient\r\n     \r\n    ) {}\r\n\r\n  getUserStories(): Observable<UserStory[]> {\r\n    return this.http.get<UserStory[]>(this.apiUrl);\r\n  }\r\n\r\n  getUserStoryById(id: number): Observable<UserStory> {\r\n    return this.http.get<UserStory>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  addUserStory(userStory: UserStory): Observable<UserStory> {\r\n    return this.http.post<UserStory>(this.apiUrl, userStory).pipe(\r\n      tap((newStory) => {\r\n        console.log('New story added:', newStory);\r\n        userStory.id = newStory.id; // Update the userStory object's ID with the received ID\r\n        \r\n        // Add the new user story to the array\r\n        this.userStories.push(newStory);\r\n  \r\n        // Clear the form\r\n        this.userStory = new UserStory();\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Error adding story:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n  \r\n  \r\n\r\n  updateUserStoryByName(name: string, updatedStory: UserStory): Observable<UserStory> {\r\n    const storyIndex = this.userStories.findIndex((story) => story.title === name);\r\n\r\n    if (storyIndex !== -1) {\r\n      return this.http.put<UserStory>(`${this.apiUrl}/${this.userStories[storyIndex].id}`, updatedStory);\r\n    } else {\r\n      throw new Error('Story not found');\r\n    }\r\n  }\r\n\r\n  deleteUserStoryByName(name: string): Observable<any> {\r\n    const storyIndex = this.userStories.findIndex((story) => story.title === name);\r\n\r\n    if (storyIndex !== -1) {\r\n      return this.http.delete(`${this.apiUrl}/${this.userStories[storyIndex].id}`);\r\n    } else {\r\n      throw new Error('Story not found');\r\n    }\r\n\r\n  // ... other methods ...\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}