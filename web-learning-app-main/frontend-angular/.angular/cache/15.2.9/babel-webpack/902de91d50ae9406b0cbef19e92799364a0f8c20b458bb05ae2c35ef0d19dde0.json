{"ast":null,"code":"import { Flashcard } from '../models/FlashCard'; // Changed from UserStory to Flashcard\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FlashcardService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/flashcards'; // URL adjusted for flashcards\n    this.flashcard = new Flashcard();\n    this.editMode = false;\n    this.flashcards = [];\n  }\n  getFlashcards() {\n    return this.http.get(this.apiUrl);\n  }\n  getFlashcardById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createFlashcard(newFlashcard) {\n    return this.http.post(this.apiUrl, newFlashcard).pipe(tap(createdFlashcard => {\n      console.log('Flashcard created:', createdFlashcard);\n      this.flashcards.push(createdFlashcard); // Add the new flashcard to the array\n    }), catchError(error => {\n      console.error('Error creating flashcard:', error);\n      throw error;\n    }));\n  }\n  updateFlashcard(id, updatedFlashcard) {\n    return this.http.put(`${this.apiUrl}/${id}`, updatedFlashcard).pipe(tap(updated => {\n      const index = this.flashcards.findIndex(f => f.id === id);\n      if (index !== -1) {\n        this.flashcards[index] = updated; // Update the flashcard in the array\n      }\n    }), catchError(error => {\n      console.error('Error updating flashcard:', error);\n      throw error;\n    }));\n  }\n  deleteFlashcard(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      this.flashcards = this.flashcards.filter(f => f.id !== id); // Remove the flashcard from the array\n    }), catchError(error => {\n      console.error('Error deleting flashcard:', error);\n      throw error;\n    }));\n  }\n}\nFlashcardService.ɵfac = function FlashcardService_Factory(t) {\n  return new (t || FlashcardService)(i0.ɵɵinject(i1.HttpClient));\n};\nFlashcardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlashcardService,\n  factory: FlashcardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,SAAS,QAAQ,qBAAqB,CAAC,CAAC;AACjD,SAASC,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAKhD,OAAM,MAAOC,gBAAgB;EAM3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IALhB,WAAM,GAAG,kCAAkC,CAAC,CAAC;IACrD,cAAS,GAAc,IAAIL,SAAS,EAAE;IACtC,aAAQ,GAAY,KAAK;IACzB,eAAU,GAAgB,EAAE;EAEW;EAEvCM,aAAa;IACX,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAc,IAAI,CAACC,MAAM,CAAC;EAChD;EAEAC,gBAAgB,CAACC,EAAU;IACzB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAY,GAAG,IAAI,CAACC,MAAM,IAAIE,EAAE,EAAE,CAAC;EACzD;EAEAC,eAAe,CAACC,YAAuB;IACrC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAY,IAAI,CAACL,MAAM,EAAEI,YAAY,CAAC,CAACE,IAAI,CAC9Db,GAAG,CAAEc,gBAAgB,IAAI;MACvBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,gBAAgB,CAAC;MACnD,IAAI,CAACG,UAAU,CAACC,IAAI,CAACJ,gBAAgB,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,EACFb,UAAU,CAAEkB,KAAK,IAAI;MACnBJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAC,eAAe,CAACX,EAAU,EAAEY,gBAA2B;IACrD,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAY,GAAG,IAAI,CAACf,MAAM,IAAIE,EAAE,EAAE,EAAEY,gBAAgB,CAAC,CAACR,IAAI,CAC5Eb,GAAG,CAAEuB,OAAO,IAAI;MACd,MAAMC,KAAK,GAAG,IAAI,CAACP,UAAU,CAACQ,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACjB,EAAE,KAAKA,EAAE,CAAC;MAC3D,IAAIe,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,IAAI,CAACP,UAAU,CAACO,KAAK,CAAC,GAAGD,OAAO,CAAC,CAAC;;IAEtC,CAAC,CAAC,EACFtB,UAAU,CAAEkB,KAAK,IAAI;MACnBJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;EAEAQ,eAAe,CAAClB,EAAU;IACxB,OAAO,IAAI,CAACL,IAAI,CAACwB,MAAM,CAAC,GAAG,IAAI,CAACrB,MAAM,IAAIE,EAAE,EAAE,CAAC,CAACI,IAAI,CAClDb,GAAG,CAAC,MAAK;MACP,IAAI,CAACiB,UAAU,GAAG,IAAI,CAACA,UAAU,CAACY,MAAM,CAAEH,CAAC,IAAKA,CAAC,CAACjB,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;IAChE,CAAC,CAAC,EACFR,UAAU,CAAEkB,KAAK,IAAI;MACnBJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb,CAAC,CAAC,CACH;EACH;;AAtDWjB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAA4B,SAAhB5B,gBAAgB;EAAA6B,YAFf;AAAM","names":["Flashcard","tap","catchError","FlashcardService","constructor","http","getFlashcards","get","apiUrl","getFlashcardById","id","createFlashcard","newFlashcard","post","pipe","createdFlashcard","console","log","flashcards","push","error","updateFlashcard","updatedFlashcard","put","updated","index","findIndex","f","deleteFlashcard","delete","filter","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Downloads\\web-learning-app-main\\web-learning-app-main\\frontend-angular\\src\\app\\services\\FlashCardService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Flashcard } from '../models/FlashCard'; // Changed from UserStory to Flashcard\r\nimport { tap, catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FlashcardService {\r\n  private apiUrl = 'http://localhost:3000/flashcards'; // URL adjusted for flashcards\r\n  flashcard: Flashcard = new Flashcard();\r\n  editMode: boolean = false;\r\n  flashcards: Flashcard[] = [];\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getFlashcards(): Observable<Flashcard[]> {\r\n    return this.http.get<Flashcard[]>(this.apiUrl);\r\n  }\r\n\r\n  getFlashcardById(id: number): Observable<Flashcard> {\r\n    return this.http.get<Flashcard>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createFlashcard(newFlashcard: Flashcard): Observable<Flashcard> {\r\n    return this.http.post<Flashcard>(this.apiUrl, newFlashcard).pipe(\r\n      tap((createdFlashcard) => {\r\n        console.log('Flashcard created:', createdFlashcard);\r\n        this.flashcards.push(createdFlashcard); // Add the new flashcard to the array\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Error creating flashcard:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  updateFlashcard(id: number, updatedFlashcard: Flashcard): Observable<Flashcard> {\r\n    return this.http.put<Flashcard>(`${this.apiUrl}/${id}`, updatedFlashcard).pipe(\r\n      tap((updated) => {\r\n        const index = this.flashcards.findIndex((f) => f.id === id);\r\n        if (index !== -1) {\r\n          this.flashcards[index] = updated; // Update the flashcard in the array\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Error updating flashcard:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteFlashcard(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(\r\n      tap(() => {\r\n        this.flashcards = this.flashcards.filter((f) => f.id !== id); // Remove the flashcard from the array\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Error deleting flashcard:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  // ... other methods as needed ...\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}