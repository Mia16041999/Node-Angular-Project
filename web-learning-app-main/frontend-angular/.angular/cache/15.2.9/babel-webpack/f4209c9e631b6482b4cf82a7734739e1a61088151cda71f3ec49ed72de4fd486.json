{"ast":null,"code":"import { Flashcard } from '../models/FlashCard';\nimport { tap, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FlashcardService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/flashcards';\n    this.flashcard = new Flashcard();\n    this.editMode = false;\n    this.flashcards = [];\n  }\n  getFlashcards() {\n    console.log('Sending GET request to:', this.apiUrl);\n    return this.http.get(this.apiUrl).pipe(tap(data => {\n      console.log('Received flashcards data:', data);\n    }), catchError(error => {\n      console.error('Error fetching flashcards:', error);\n      throw error;\n    }));\n  }\n  // Other methods...\n  getFlashcardById(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createFlashcard(newFlashcard) {\n    return this.http.post(this.apiUrl, newFlashcard).pipe(tap(createdFlashcard => {\n      console.log('Flashcard created:', createdFlashcard);\n      this.flashcards.push(createdFlashcard); // Add the new flashcard to the array\n    }), catchError(error => {\n      console.error('Error creating flashcard:', error);\n      throw error;\n    }));\n  }\n  updateFlashcard(id, updatedFlashcard) {\n    return this.http.put(`${this.apiUrl}/${id}`, updatedFlashcard).pipe(tap(updated => {\n      const index = this.flashcards.findIndex(f => f.id === id);\n      if (index !== -1) {\n        this.flashcards[index] = updated; // Update the flashcard in the array\n      }\n    }), catchError(error => {\n      console.error('Error updating flashcard:', error);\n      throw error;\n    }));\n  }\n  deleteFlashcard(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(tap(() => {\n      this.flashcards = this.flashcards.filter(f => f.id !== id); // Remove the flashcard from the array\n    }), catchError(error => {\n      console.error('Error deleting flashcard:', error);\n      throw error;\n    }));\n  }\n}\nFlashcardService.ɵfac = function FlashcardService_Factory(t) {\n  return new (t || FlashcardService)(i0.ɵɵinject(i1.HttpClient));\n};\nFlashcardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FlashcardService,\n  factory: FlashcardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Flashcard","tap","catchError","FlashcardService","constructor","http","getFlashcards","console","log","apiUrl","get","pipe","data","error","getFlashcardById","id","createFlashcard","newFlashcard","post","createdFlashcard","flashcards","push","updateFlashcard","updatedFlashcard","put","updated","index","findIndex","f","deleteFlashcard","delete","filter","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\HP\\Downloads\\web-learning-app-main\\web-learning-app-main\\frontend-angular\\src\\app\\services\\FlashCardService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Flashcard } from '../models/FlashCard';\r\nimport { tap, catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FlashcardService {\r\n    private apiUrl = 'http://localhost:3000/flashcards';\r\n    flashcard: Flashcard = new Flashcard();\r\n    editMode: boolean = false;\r\n    flashcards: Flashcard[] = [];\r\n\r\n    constructor(private http: HttpClient) {}\r\n\r\n    getFlashcards(): Observable<Flashcard[]> {\r\n        console.log('Sending GET request to:', this.apiUrl);\r\n        return this.http.get<Flashcard[]>(this.apiUrl).pipe(\r\n            tap((data) => {\r\n                console.log('Received flashcards data:', data);\r\n            }),\r\n            catchError((error) => {\r\n                console.error('Error fetching flashcards:', error);\r\n                throw error;\r\n            })\r\n        );\r\n    }\r\n\r\n    // Other methods...\r\n\r\n\r\n\r\n\r\n  getFlashcardById(id: number): Observable<Flashcard> {\r\n    return this.http.get<Flashcard>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createFlashcard(newFlashcard: Flashcard): Observable<Flashcard> {\r\n    return this.http.post<Flashcard>(this.apiUrl, newFlashcard).pipe(\r\n      tap((createdFlashcard) => {\r\n        console.log('Flashcard created:', createdFlashcard);\r\n        this.flashcards.push(createdFlashcard); // Add the new flashcard to the array\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Error creating flashcard:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  updateFlashcard(id: number, updatedFlashcard: Flashcard): Observable<Flashcard> {\r\n    return this.http.put<Flashcard>(`${this.apiUrl}/${id}`, updatedFlashcard).pipe(\r\n      tap((updated) => {\r\n        const index = this.flashcards.findIndex((f) => f.id === id);\r\n        if (index !== -1) {\r\n          this.flashcards[index] = updated; // Update the flashcard in the array\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Error updating flashcard:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteFlashcard(id: number): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`).pipe(\r\n      tap(() => {\r\n        this.flashcards = this.flashcards.filter((f) => f.id !== id); // Remove the flashcard from the array\r\n      }),\r\n      catchError((error) => {\r\n        console.error('Error deleting flashcard:', error);\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  // ... other methods as needed ...\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}